# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Пример ввода и вывода данных представлены на
# следующем слайде
# 20 минут
# Семинар 7. Функции высшего порядка
# Задача №49. Решение в группах
# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

import random

type_list = [(random.randint(1,8),random.randint(1,8)) for _ in range(10)]# создаём список в котором два значение рандомных в кол-ве 10 штук
print(type_list)

type_list = list(filter(lambda x: x[0] != x[1], type_list))# сравнение элементов если есть элемент с одинаковыми значениями например 1 1 то это искуственный спутник и мы его не учитываем и отфильтровываем
print(type_list)
print(type_list := list(set(type_list))) # с помощью set оставляем только уникальные значения без повторений

print(new_list := list(map(lambda x: 3.14 * x[0] * x[1], type_list))) # находим все площади и печатаем
for i in type_list:
    if i[0] * i[1] * 3.14 == max(new_list):
        print(i , max(new_list))